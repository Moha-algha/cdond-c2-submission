version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy front end environment
          when: on_fail
          command: |
             delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy backend end environment
          when: on_fail
          command: |
             delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

orbs:
  ansible-playbook: orbss/ansible-playbook@0.0.5
  aws-cli: circleci/aws-cli@3.1.5
      
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            cd ..
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             cd ..
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm install
             npm run test
             cd ..
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm run test
             cd ..
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
           
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Back-end scan
          command: |
             cd frontend
             npm install
             npm install oauth-sign@^0.9.0
             npm update loader-utils --depth 2
             npm audit fix --force
             npm audit --audit-level=critical
             cd ..
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm install
             npm install oauth-sign@^0.9.0
             npm audit fix --force
             npm audit --audit-level=critical
             cd ..
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan           
   
  deploy-infrastructure:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install PIP
          command: sudo apt-get install python-pip python-dev
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      
  configure-infrastructure:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprint: ["6a:57:43:68:5e:3c:d3:a4:61:9f:69:cb:f2:a5:44:43"]
      - attach_workspace: 
          at: /.circleci
      - persist_to_workspace:
          root: /
          paths:
            - .circleci/
      - run:
          name: Install Ansible
          command: |
            export PIP=$(which pip pip3 | head -1)
              if [[ -n $PIP ]]; then
                if which sudo > /dev/null; then
                  sudo $PIP install ansible --upgrade
                else
                  $PIP install ansible --upgrade --user
                fi
              else
                echo "Unable to install Ansible. Please install pip."
                exit 1
              fi
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [run-migrations]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cd ..
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            then
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: run-migrations
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Install Python
          command: sudo apt install python3
      - run: 
          name: Install PIP
          command: sudo apt-get install python-pip python-dev
      - run:
          name: Install Ansible
          command: |
            export PIP=$(which pip pip3 | head -1)
              if [[ -n $PIP ]]; then
                if which sudo > /dev/null; then
                  sudo $PIP install ansible --upgrade
                else
                  $PIP install ansible --upgrade --user
                fi
              else
                echo "Unable to install Ansible. Please install pip."
                exit 1
              fi
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances...............)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback
      
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprint: ["6a:57:43:68:5e:3c:d3:a4:61:9f:69:cb:f2:a5:44:43"]
      - attach_workspace: 
          at: /.circleci
      - run: 
          name: Install Python
          command: sudo apt install python3
      - run: 
          name: Install PIP
          command: sudo apt-get install python-pip python-dev
      - run:
          name: Install Ansible
          command: |
            export PIP=$(which pip pip3 | head -1)
              if [[ -n $PIP ]]; then
                if which sudo > /dev/null; then
                  sudo $PIP install ansible --upgrade
                else
                  $PIP install ansible --upgrade --user
                fi
              else
                echo "Unable to install Ansible. Please install pip."
                exit 1
              fi
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

workflows:
  build_project:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend
      - test-backend
      - scan-frontend
      - scan-backend
      - deploy-infrastructure
      - run-migrations
      - deploy-backend:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires: 
            - deploy-backend
            - configure-infrastructure